name: Check Docs Summarization

on:
  push:
    branches: [release/**]

jobs:
  check-batch:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: read
      id-token: write
      actions: read
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai huggingface_hub
          
      - name: List artifacts
        uses: actions/github-script@v6
        id: artifacts
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.name,
            });
            const batchArtifact = artifacts.data.artifacts
              .find(artifact => artifact.name.startsWith('batch-id-'));
            if (!batchArtifact) {
              throw new Error('No batch ID artifact found');
            }
            console.log(`Found artifact: ${batchArtifact.name}`);
            return batchArtifact.name;
          
      - name: Download batch ID
        uses: actions/download-artifact@v3
        with:
          name: ${{ steps.artifacts.outputs.result }}
          
      - name: Download repomix outputs
        uses: actions/download-artifact@v3
        with:
          name: repomix-outputs
          path: repomix-outputs
          
      - name: Process batch results and upload to HuggingFace
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Process OpenAI batch results
          python scripts/check_batch_output.py
          
          # Upload all files to HuggingFace
          python -c '
          from huggingface_hub import HfApi
          
          api = HfApi()
          
          # Upload OpenAI summary
          api.upload_file(
              token="${{ secrets.HF_TOKEN }}",
              repo_id="zenml/docs-summaries",
              repo_type="dataset",
              path_in_repo="zenml_docs.txt",
              path_or_fileobj="zenml_docs.txt",
          )
          
          # Upload repomix outputs
          for filename in ["component-guide.txt", "basics.txt"]:
              api.upload_file(
                  token="${{ secrets.HF_TOKEN }}",
                  repo_id="zenml/docs-summaries",
                  repo_type="dataset",
                  path_in_repo=filename,
                  path_or_fileobj=f"repomix-outputs/{filename}",
              )
          ' 