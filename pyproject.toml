[build-system]
requires = ["uv_build >= 0.8.17, <0.9.0"]
build-backend = "uv_build"

[project]
name = "zenml"
version = "0.90.0rc0"
description = "ZenML: MLOps for Reliable AI: from Classical AI to Agents."
authors = [{name = "ZenML GmbH", email = "info@zenml.io"}]
readme = "README.md"
license = "Apache-2.0"
keywords = ["machine learning", "production", "pipeline", "mlops", "devops", "ai", "agents", "agentic workflows"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Distributed Computing",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
requires-python = ">=3.9,<3.13"

dependencies = [
    "click>=8.0.1,<=8.2.1",
    "cloudpickle>=2.0.0",
    "distro>=1.6.0,<2.0.0",
    "docker~=7.1.0",
    "gitpython>=3.1.18,<4.0.0",
    "jsonref",
    "packaging>=24.1",
    "psutil>=5.0.0",
    "pydantic>=2.0,<=2.11.9",
    "python-dateutil>=2.8.1,<3.0.0",
    "pyyaml>=6.0.1",
    "rich>=12.0.0", # Make sure to keep the version aligned with our `jupyter` extra
    "setuptools>=70.0.0",
    "importlib_metadata<=7.0.0; python_version < '3.10'",
]

[project.urls]
Homepage = "https://zenml.io"
Documentation = "https://docs.zenml.io"
Repository = "https://github.com/zenml-io/zenml"
Issues = "https://github.com/zenml-io/zenml/issues"

[project.scripts]
zenml = "zenml.cli.cli:cli"

[project.optional-dependencies]
local = [
    "alembic>=1.8.1,<=1.15.2",
    "bcrypt==4.0.1",
    "passlib[bcrypt]~=1.7.4",
    "pymysql>=1.1.1,~=1.1.0",
    "sqlalchemy>=2.0.0,<3.0.0",
    "sqlalchemy_utils",
    "sqlmodel==0.0.18",
]
server = [
    "zenml[local]",  # Includes all the DB dependencies
    "fastapi>=0.100,<=0.115.8",
    "uvicorn[standard]>=0.17.5",
    "python-multipart~=0.0.9",
    "pyjwt[crypto]==2.7.*",
    "fastapi-utils",
    "orjson~=3.10.0",
    "Jinja2",
    "ipinfo>=4.4.3",
    "secure~=0.3.0",
    "tldextract~=5.1.0",
    "itsdangerous~=2.2.0",
]
jupyter = ["rich[jupyter]>=12.0.0"]
templates = ["copier>=8.1.0", "jinja2-time>=0.2.0,<0.3.0", "ruff>=0.1.7", "pyyaml-include<2.0"]
terraform = ["python-terraform"]
secrets-aws = ["boto3>=1.16.0"]
secrets-gcp = ["google-cloud-secret-manager>=2.12.5"]
secrets-azure = ["azure-identity>=1.4.0", "azure-keyvault-secrets>=4.0.0"]
secrets-hashicorp = ["hvac>=0.11.2"]
s3fs = ["s3fs>=2022.11.0,!=2025.3.1"]
gcsfs = ["gcsfs>=2022.11.0"]
adlfs = ["adlfs>=2021.10.0"]
connectors-kubernetes = ["kubernetes>=18.20.0"]
connectors-aws = ["boto3>=1.16.0", "kubernetes>=18.20.0", "aws-profile-manager>=0.5.0"]
connectors-gcp = [
    "google-cloud-container>=2.21.0",
    "google-cloud-storage>=2.9.0",
    "google-cloud-artifact-registry>=1.11.3",
    "kubernetes>=18.20.0",
]
connectors-azure = [
    "azure-identity>=1.4.0",
    "azure-mgmt-containerservice>=20.0.0",
    "azure-mgmt-containerregistry>=10.0.0",
    "azure-mgmt-storage>=20.0.0",
    "azure-storage-blob>=12.0.0",
    "azure-mgmt-resource>=21.0.0",
    "kubernetes>=18.20.0",
    "requests>=2.27.11,<3.0.0",
]
sagemaker = [
    "sagemaker>=2.237.3",
]
vertex = [
    "google-cloud-aiplatform>=1.34.0",
    "kfp>=2.6.0",
    "google-cloud-pipeline-components>=2.19.0",
]
azureml = [
    "azure-ai-ml==1.23.1",
]
dev = [
    "bandit>=1.7.5,<2.0.0",
    "ruff>=0.1.7",
    "yamlfix>=1.16.0",
    "coverage[toml]>=5.5,<6.0.0",
    "pytest>=7.4.0,<8.0.0",
    "mypy==1.7.1",
    "pre-commit",
    "pyment>=0.3.3,<0.4.0",
    "tox>=3.24.3",
    "hypothesis>=6.43.1",
    "typing-extensions>=3.7.4",
    "darglint>=1.8.1",
    "pytest-randomly>=3.10.1,<4.0.0",
    "pytest-mock>=3.6.1,<4.0.0",
    "pytest-clarity>=1.0.1,<2.0.0",
    "pytest-instafail>=0.5.0",
    "pytest-rerunfailures>=13.0,<14.0.0",
    "pytest-split>=0.8.1,<0.9.0",
    "mkdocs>=1.6.1,<2.0.0",
    "mkdocs-material==9.6.8",
    "mkdocs-awesome-pages-plugin>=2.10.1,<3.0.0",
    "mkdocstrings[python]>=0.28.1,<1.0.0",
    "mkdocstrings-python",
    "mkdocs-autorefs>=1.4.0,<2.0.0",
    "mike>=1.1.2,<2.0.0",
    "maison<2.0",
    "types-certifi>=2021.10.8.0",
    "types-croniter>=1.0.2",
    "types-futures>=3.3.1",
    "types-Markdown>=3.3.6",
    "types-paramiko>=3.4.0,<4.0.0",
    "types-Pillow>=9.2.1",
    "types-protobuf>=3.18.0",
    "types-PyMySQL>=1.0.4",
    "types-python-dateutil>=2.8.2",
    "types-python-slugify>=5.0.2",
    "types-PyYAML>=6.0.0",
    "types-redis>=4.1.19",
    "types-requests>=2.27.11",
    "types-setuptools>=57.4.2",
    "types-six>=1.16.2",
    "types-termcolor>=1.1.2",
    "types-psutil>=5.8.13",
    "types-passlib>=1.7.7",
]

[tool.pytest.ini_options]
filterwarnings = ["ignore::DeprecationWarning"]
log_cli = false
log_cli_level = "INFO"
testpaths = "tests"
xfail_strict = true
norecursedirs = [
    "tests/integration/examples/*", # ignore example folders
]

[tool.coverage.run]
parallel = true
source = ["src/zenml"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    'if __name__ == "__main__":',
    "if TYPE_CHECKING:",
]

[tool.ruff]
line-length = 79
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    ".test_durations",
    "build",
    "dist",
    "node_modules",
    "venv",
    '__init__.py',
    'src/zenml/cli/version.py',
    # LitGPT files from the LLM Finetuning example
    'examples/llm_finetuning/evaluate',
    'examples/llm_finetuning/finetune',
    'examples/llm_finetuning/generate',
    'examples/llm_finetuning/lit_gpt',
    'examples/llm_finetuning/scripts',
]

src = ["src", "test"]
# use Python 3.9 as the minimum version for autofixing
target-version = "py39"


[tool.ruff.format]
exclude = [
    "*.git",
    "*.hg",
    ".mypy_cache",
    ".tox",
    ".venv",
    "_build",
    "buck-out",
    "build]",
]

[tool.ruff.lint]
# Disable autofix for unused imports (`F401`).
unfixable = ["F401"]
per-file-ignores = { }
ignore = [
    "E501",
    "F401",
    "F403",
    "D301",
    "D401",
    "D403",
    "D407",
    "D213",
    "D203",
    "S101",
    "S104",
    "S105",
    "S106",
    "S107",
]
select = ["D", "E", "F", "I", "I001", "Q"]

[tool.ruff.lint.flake8-import-conventions.aliases]
altair = "alt"
"matplotlib.pyplot" = "plt"
numpy = "np"
pandas = "pd"
seaborn = "sns"

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.bandit]
skips = ["B615"]

[tool.mypy]

plugins = ["pydantic.mypy"]

strict = true
namespace_packages = true
show_error_codes = true

# import all google, transformers and datasets files as `Any`
[[tool.mypy.overrides]]
module = [
    "google.*",
    "transformers.*", # https://github.com/huggingface/transformers/issues/13390
    "datasets.*",
    "langchain_community.*",
    "IPython.core.*",
]
follow_imports = "skip"

[[tool.mypy.overrides]]
module = [
    "airflow.*",
    "tensorflow.*",
    "apache_beam.*",
    "pandas.*",
    "distro.*",
    "analytics.*",
    "absl.*",
    "gcsfs.*",
    "s3fs.*",
    "adlfs.*",
    "fsspec.*",
    "torch.*",
    "pytorch_lightning.*",
    "sklearn.*",
    "numpy.*",
    "facets_overview.*",
    "IPython.core.*",
    "IPython.display.*",
    "plotly.*",
    "dash.*",
    "dash_bootstrap_components.*",
    "dash_cytoscape",
    "dash.dependencies",
    "docker.*",
    "flask.*",
    "kfp.*",
    "kubernetes.*",
    "urllib3.*",
    "kfp_server_api.*",
    "sagemaker.*",
    "azureml.*",
    "google.*",
    "google_cloud_pipeline_components.*",
    "neuralprophet.*",
    "lightgbm.*",
    "scipy.*",
    "seaborn.*",
    "deepchecks.*",
    "boto3.*",
    "botocore.*",
    "jupyter_dash.*",
    "slack_sdk.*",
    "azure-keyvault-keys.*",
    "azure-mgmt-resource.*",
    "azure.mgmt.resource.*",
    "model_archiver.*",
    "kfp_tekton.*",
    "mlflow.*",
    "python_terraform.*",
    "bentoml.*",
    "multipart.*",
    "jose.*",
    "sqlalchemy_utils.*",
    "sky.*",
    "copier.*",
    "datasets.*",
    "pyngrok.*",
    "cloudpickle.*",
    "matplotlib.*",
    "IPython.*",
    "huggingface_hub.*",
    "distutils.*",
    "accelerate.*",
    "label_studio_sdk.*",
    "argilla.*",
    "lightning_sdk.*",
    "peewee.*",
    "prodigy.*",
    "prodigy.components.*",
    "prodigy.components.db.*",
    "transformers.*",
    "vllm.*",
    "numba.*",
    "uvloop.*",
    "litellm",
    "jsonref",
]
ignore_missing_imports = true
