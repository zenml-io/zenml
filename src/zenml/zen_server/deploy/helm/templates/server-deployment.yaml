apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "zenml.fullname" . }}
  labels:
    {{- include "zenml.labels" . | nindent 4 }}
spec:
  {{- if .Values.zenml.database.url }}
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.zenml.replicaCount }}
  {{- end }}
  {{- else }}
  replicas: 1
  {{- end }}
  selector:
    matchLabels:
      {{- include "zenml.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/server-secret.yaml") . | sha256sum }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "zenml.selectorLabels" . | nindent 8 }}
    spec:
      {{- if or .Values.zenml.certificates.customCAs .Values.zenml.certificates.secretRefs }}
      initContainers:
        - name: update-ca-certificates
          image: "{{ .Values.zenml.image.repository }}:{{ .Values.zenml.image.tag | default .Chart.Version }}"
          imagePullPolicy: {{ .Values.zenml.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args: ["update-ca-certificates && cp -r /etc/ssl/certs/* /updated-certs"]
          securityContext:
            runAsUser: 0  # Run as root
          volumeMounts:
            - name: custom-certs
              mountPath: /usr/local/share/ca-certificates
            - name: ca-certificates
              mountPath: /updated-certs
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "zenml.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: zenml-config
          emptyDir: {}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.zenml.image.repository }}:{{ .Values.zenml.image.tag | default .Chart.Version }}"
          imagePullPolicy: {{ .Values.zenml.image.pullPolicy }}
          volumeMounts:
            - name: zenml-config
              mountPath: /zenml/.zenconfig
          env:
            - name: REQUESTS_CA_BUNDLE
              value: /etc/ssl/certs/ca-certificates.crt
            - name: SSL_CERT_FILE
              value: /etc/ssl/certs/ca-certificates.crt
            # Force Node.js to use system CAs
            - name: NODE_OPTIONS
              value: --use-openssl-ca
            {{- if .Values.zenml.debug }}
            - name: ZENML_LOGGING_VERBOSITY
              value: "DEBUG"
            {{- end }}
            {{- if .Values.zenml.analyticsOptIn }}
            - name: ZENML_ANALYTICS_OPT_IN
              value: "True"
            {{- else if not .Values.zenml.analyticsOptIn }}
            - name: ZENML_ANALYTICS_OPT_IN
              value: "False"
            {{- end }}
            - name: ZENML_DEFAULT_PROJECT_NAME
              value: {{ .Values.zenml.defaultProject | quote }}
            {{- if .Values.zenml.enableImplicitAuthMethods }}
            - name: ZENML_ENABLE_IMPLICIT_AUTH_METHODS
              value: "True"
            {{- end }}
            {{- if .Values.zenml.database.url }}
            - name: DISABLE_DATABASE_MIGRATION
              value: "True"
            {{- end }}

            {{- range $k, $v := include "zenml.storeEnvVariables" . | fromYaml }}
            - name: {{ $k }}
              value: {{ $v | quote }}
            {{- end }}
            {{- range $k, $v := include "zenml.serverEnvVariables" . | fromYaml }}
            - name: {{ $k }}
              value: {{ $v | quote }}
            {{- end }}
            {{- range $k, $v := include "zenml.secretsStoreEnvVariables" . | fromYaml }}
            - name: {{ $k }}
              value: {{ $v | quote }}
            {{- end }}
            {{- range $k, $v := include "zenml.backupSecretsStoreEnvVariables" . | fromYaml }}
            - name: {{ $k }}
              value: {{ $v | quote }}
            {{- end }}
            {{- if .Values.zenml.environment }}
            {{- range $key, $value := .Values.zenml.environment }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
            {{- if .Values.zenml.proxy.enabled }}
            - name: HTTP_PROXY
              value: {{ .Values.zenml.proxy.httpProxy | quote }}
            - name: HTTPS_PROXY
              value: {{ .Values.zenml.proxy.httpsProxy | quote }}
            - name: NO_PROXY
              value: {{ include "zenml.noProxyList" . | quote }}
            - name: http_proxy
              value: {{ .Values.zenml.proxy.httpProxy | quote }}
            - name: https_proxy
              value: {{ .Values.zenml.proxy.httpsProxy | quote }}
            - name: no_proxy
              value: {{ include "zenml.noProxyList" . | quote }}
            {{- end }}
          envFrom:
          - secretRef:
              name: {{ include "zenml.fullname" . }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
          lifecycle:
            preStop:
              exec:
                # Give the process 15 more seconds before the SIGTERM signal is
                # sent. This allows the endpoint removal to reach the ingress
                # controller in time and for traffic to be routed away from the
                # pod before it is shut down. This eliminates the number of 502
                # errors returned to the user.
                #
                # See https://learnk8s.io/graceful-shutdown for more information.
                #
                command: ["sleep", "15"]
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if or .Values.zenml.certificates.customCAs .Values.zenml.certificates.secretRefs }}
          volumeMounts:
            - name: custom-certs
              mountPath: /usr/local/share/ca-certificates
              readOnly: true
            - name: ca-certificates
              mountPath: /etc/ssl/certs
              readOnly: true
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or .Values.zenml.certificates.customCAs .Values.zenml.certificates.secretRefs }}
      volumes:
        - name: custom-certs
          projected:
            sources:
            {{- range .Values.zenml.certificates.customCAs }}
            - configMap:
                name: {{ include "zenml.fullname" $ }}-custom-ca-{{ .name }}
                items:
                  - key: certificate
                    path: {{ .name }}.crt
            {{- end }}
            {{- range .Values.zenml.certificates.secretRefs }}
            - secret:
                name: {{ .name }}
                items:
                  - key: {{ .key }}
                    path: {{ .name }}.crt
            {{- end }}
        - name: ca-certificates
          emptyDir: {}
      {{- end }}
