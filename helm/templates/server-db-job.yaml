{{- if .Values.zenml.database.url }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "zenml.fullname" . }}-db-migration
  labels:
    {{- include "zenml.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": before-hook-creation{{ if not .Values.zenml.debug }},hook-succeeded{{ end }}
spec:
  backoffLimit: 0
  template:
    metadata:
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/server-secret.yaml") . | sha256sum }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "zenml.selectorLabels" . | nindent 8 }}
    spec:
      {{- if or .Values.zenml.certificates.customCAs .Values.zenml.certificates.secretRefs }}
      initContainers:
        - name: update-ca-certificates
          image: "{{ .Values.zenml.image.repository }}:{{ .Values.zenml.image.tag | default .Chart.Version }}"
          imagePullPolicy: {{ .Values.zenml.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              # Copy the system CA bundle
              cp /etc/ssl/certs/ca-certificates.crt /updated-certs/ca-certificates.crt
              # Append all custom certificates
              for cert in /custom-certs/*.crt; do
                if [ -f "$cert" ]; then
                  cat "$cert" >> /updated-certs/ca-certificates.crt
                fi
              done
          volumeMounts:
            - name: custom-certs
              mountPath: /custom-certs
              readOnly: true
            - name: ca-certificates
              mountPath: /updated-certs
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "zenml.serviceAccountName" . }}-db-migration
      {{- else }}
      serviceAccountName: {{ include "zenml.serviceAccountName" . }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: zenml-config
          emptyDir: {}
      {{- if eq .Values.zenml.database.backupStrategy "dump-file" }}
        # define a volume that will hold a backup of the database
        - name: db-backup
        # if a storage PVC is configured, then use it
        {{- if .Values.zenml.database.backupPVStorageSize }}
          persistentVolumeClaim:
            claimName: {{ include "zenml.fullname" . }}-db-backup
        {{- else }}
        # otherwise, use an emptyDir
          emptyDir: {}
        {{- end }}
      {{- end }}
      {{- if or .Values.zenml.certificates.customCAs .Values.zenml.certificates.secretRefs }}
        - name: custom-certs
          projected:
            sources:
            {{- range .Values.zenml.certificates.customCAs }}
            - secret:
                name: {{ include "zenml.fullname" $ }}-custom-ca-{{ .name }}-db-migration
                items:
                  - key: certificate
                    path: {{ .name }}.crt
            {{- end }}
            {{- range .Values.zenml.certificates.secretRefs }}
            - secret:
                name: {{ .name }}
                items:
                  - key: {{ .key }}
                    path: {{ .name }}.crt
            {{- end }}
        - name: ca-certificates
          emptyDir: {}
      {{- end }}
      {{- if or (and .Values.zenml.database.sslCa .Values.zenml.database.sslCa.secretRef) (and .Values.zenml.database.sslCert .Values.zenml.database.sslCert.secretRef) (and .Values.zenml.database.sslKey .Values.zenml.database.sslKey.secretRef) }}
        - name: db-certs
          projected:
            sources:
              {{- if and .Values.zenml.database.sslCa .Values.zenml.database.sslCa.secretRef }}
              - secret:
                  name: {{ .Values.zenml.database.sslCa.secretRef.name }}
                  items:
                    - key: {{ .Values.zenml.database.sslCa.secretRef.key }}
                      path: {{ .Values.zenml.database.sslCa.secretRef.key }}
              {{- end }}
              {{- if and .Values.zenml.database.sslCert .Values.zenml.database.sslCert.secretRef }}
              - secret:
                  name: {{ .Values.zenml.database.sslCert.secretRef.name }}
                  items:
                    - key: {{ .Values.zenml.database.sslCert.secretRef.key }}
                      path: {{ .Values.zenml.database.sslCert.secretRef.key }}
              {{- end }}
              {{- if and .Values.zenml.database.sslKey .Values.zenml.database.sslKey.secretRef }}
              - secret:
                  name: {{ .Values.zenml.database.sslKey.secretRef.name }}
                  items:
                    - key: {{ .Values.zenml.database.sslKey.secretRef.key }}
                      path: {{ .Values.zenml.database.sslKey.secretRef.key }}
              {{- end }}
      {{- end }}
      restartPolicy: Never
      containers:
        - name: {{ .Chart.Name }}-db-migration
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.zenml.image.repository }}:{{ .Values.zenml.image.tag | default .Chart.Version }}"
          imagePullPolicy: {{ .Values.zenml.image.pullPolicy }}
          args: ["migrate-database"]
          command: ['zenml']
          volumeMounts:
            - name: zenml-config
              mountPath: /zenml/.zenconfig
          {{- if eq .Values.zenml.database.backupStrategy "dump-file" }}
            - name: db-backup
              mountPath: /backups
          {{- end }}
          {{- if or .Values.zenml.certificates.customCAs .Values.zenml.certificates.secretRefs }}
            - name: ca-certificates
              mountPath: /updated-certs
              readOnly: true
          {{- end }}
          {{- if or (and .Values.zenml.database.sslCa .Values.zenml.database.sslCa.secretRef) (and .Values.zenml.database.sslCert .Values.zenml.database.sslCert.secretRef) (and .Values.zenml.database.sslKey .Values.zenml.database.sslKey.secretRef) }}
            - name: db-certs
              mountPath: /dbcerts
              readOnly: true
          {{- end }}
          env:
          {{- if or .Values.zenml.certificates.customCAs .Values.zenml.certificates.secretRefs }}
            - name: REQUESTS_CA_BUNDLE
              value: /updated-certs/ca-certificates.crt
            - name: SSL_CERT_FILE
              value: /updated-certs/ca-certificates.crt
          {{- end }}
            - name: ZENML_SERVER
              value: "True"
            {{- if .Values.zenml.debug }}
            - name: ZENML_LOGGING_VERBOSITY
              value: "DEBUG"
            {{- end }}
            {{- if .Values.zenml.analyticsOptIn }}
            - name: ZENML_ANALYTICS_OPT_IN
              value: "True"
            {{- else if not .Values.zenml.analyticsOptIn }}
            - name: ZENML_ANALYTICS_OPT_IN
              value: "False"
            {{- end }}
            - name: ZENML_DEFAULT_PROJECT_NAME
              value: {{ .Values.zenml.defaultProject | quote }}
            {{- range $k, $v := include "zenml.storeEnvVariables" . | fromYaml }}
            - name: {{ $k }}
              value: {{ $v | quote }}
            {{- end }}
            {{- range $k, $v := include "zenml.serverEnvVariables" . | fromYaml }}
            - name: {{ $k }}
              value: {{ $v | quote }}
            {{- end }}
            {{- range $k, $v := include "zenml.secretsStoreEnvVariables" . | fromYaml }}
            - name: {{ $k }}
              value: {{ $v | quote }}
            {{- end }}
            {{- range $k, $v := include "zenml.backupSecretsStoreEnvVariables" . | fromYaml }}
            - name: {{ $k }}
              value: {{ $v | quote }}
            {{- end }}
            {{- if .Values.zenml.proxy.enabled }}
            - name: HTTP_PROXY
              value: {{ .Values.zenml.proxy.httpProxy | quote }}
            - name: HTTPS_PROXY
              value: {{ .Values.zenml.proxy.httpsProxy | quote }}
            - name: NO_PROXY
              value: {{ include "zenml.noProxyList" . | quote }}
            - name: http_proxy
              value: {{ .Values.zenml.proxy.httpProxy | quote }}
            - name: https_proxy
              value: {{ .Values.zenml.proxy.httpsProxy | quote }}
            - name: no_proxy
              value: {{ include "zenml.noProxyList" . | quote }}
            {{- end }}
            {{- if and .Values.zenml.database.url .Values.zenml.database.passwordSecretRef }}
            - name: ZENML_STORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.zenml.database.passwordSecretRef.name }}
                  key: {{ .Values.zenml.database.passwordSecretRef.key }}
            {{- end }}
            {{- if .Values.zenml.environment }}
            {{- range $key, $value := .Values.zenml.environment }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
          envFrom:
          - secretRef:
              name: {{ include "zenml.fullname" . }}-db-migration
          resources:
            {{- if .Values.resourcesMigrationPod }}
            {{- toYaml .Values.resourcesMigrationPod | nindent 12 }}
            {{- else }}
            {{- toYaml .Values.resources | nindent 12 }}
            {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}