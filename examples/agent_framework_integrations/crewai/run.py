"""ZenML Pipeline for CrewAI Travel Assistant.

This pipeline encapsulates the CrewAI multi-agent system in a ZenML pipeline,
demonstrating how to integrate the CrewAI framework with ZenML for orchestration
and artifact management.
"""

from typing import Annotated, Any, Dict

from crewai_agent import crew

from zenml import ExternalArtifact, pipeline, step


@step
def run_crewai_agents(query: str) -> Annotated[Dict[str, Any], "crew_results"]:
    """Execute the CrewAI crew and return results."""
    # Extract city from query string
    city = query.split(" for ")[-1] if " for " in query else "Unknown"

    try:
        # Execute the crew with the city parameter
        result = crew.kickoff(inputs={"city": city})

        # Convert result to dict for ZenML artifact storage
        return {"city": city, "result": str(result), "status": "success"}
    except Exception as e:
        return {
            "city": city,
            "result": f"Crew execution error: {str(e)}",
            "status": "error",
        }


@step
def format_travel_results(
    crew_data: Dict[str, Any],
) -> Annotated[str, "formatted_results"]:
    """Format the CrewAI results into a readable summary."""
    city = crew_data["city"]
    result = crew_data["result"]
    status = crew_data["status"]

    if status == "error":
        formatted = f"""❌ TRAVEL PLANNING ERROR FOR {city.upper()}
{"=" * 50}

{result}
"""
    else:
        formatted = f"""✈️ TRAVEL PLANNING FOR {city.upper()}
{"=" * 50}

{result}

🤖 Generated by CrewAI Multi-Agent System
"""

    return formatted.strip()


@pipeline
def crewai_travel_pipeline() -> str:
    """ZenML pipeline that orchestrates the CrewAI travel planning system.

    Returns:
        Formatted travel planning results
    """
    # External artifact for travel query
    travel_query = ExternalArtifact(value="Travel planning for Berlin")

    # Run the CrewAI agents
    crew_results = run_crewai_agents(travel_query)

    # Format the results
    summary = format_travel_results(crew_results)

    return summary


if __name__ == "__main__":
    print("🚀 Running CrewAI travel pipeline...")
    run_result = crewai_travel_pipeline()
    print("Pipeline completed successfully!")
    print("Check the ZenML dashboard for detailed results and artifacts.")
